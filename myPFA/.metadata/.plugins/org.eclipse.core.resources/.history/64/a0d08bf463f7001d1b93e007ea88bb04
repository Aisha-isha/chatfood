package com.example.demo.service;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.model.Role;
import com.example.demo.model.User1;
import com.example.demo.model.Reader;
import com.example.demo.model.Writer;
import com.example.demo.repository.UserRepository;
import com.example.demo.repository.ReaderRepository;
import com.example.demo.repository.WriterRepository;
import com.example.demo.web.dto.UserRegistrationDto;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;
	@Autowired
	private WriterRepository writerRepository;
	@Autowired
	private ReaderRepository readerRepository;
	@Autowired
	@Lazy
	private BCryptPasswordEncoder passwordEncoder;

	@Override
	public List<User1> getAllUsers() {
		return userRepository.findAll();
	}

	@Override
	public User1 save(UserRegistrationDto registrationDto) {
		User1 user1 = new User1(registrationDto.getFirstName(), registrationDto.getLastName(), registrationDto.getEmail(),
				passwordEncoder.encode(registrationDto.getPassword()), registrationDto.getRole(),
				Arrays.asList(new Role("ROLE_USER")), registrationDto.getResetPasswordToken());

		user1 = userRepository.save(user1);

		if (registrationDto.getRole().equals("author")) {
			Writer writer = new Writer();
			writer.setUser1(user1);
			writerRepository.save(writer);
		}

		if (registrationDto.getRole().equals("reader")) {
			Reader reader = new Reader();
			reader.setUser1(user1);
			readerRepository.save(reader);
		}

		return user1;
	}

	@Override
	public void updateResetPasswordToken(String token, String email) throws UsernameNotFoundException {
		User1 user1 = userRepository.findByEmail(email);
		if (user1 != null) {
			user1.setResetPasswordToken(token);
			userRepository.save(user1);
		} else {
			throw new UsernameNotFoundException("Could not find any user with the email " + email);
		}
	}

	@Override
	public User1 getByResetPasswordToken(String token) {
		return userRepository.findByResetPasswordToken(token);
	}

	@Override
	public void updatePassword(User1 user1, String newPassword) {
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String encodedPassword = passwordEncoder.encode(newPassword);
		user1.setPassword(encodedPassword);

		user1.setResetPasswordToken(null);
		userRepository.save(user1);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User1 user1 = userRepository.findByEmail(username);
		if (user1 == null) {
			throw new UsernameNotFoundException("Invalid username or password");
		}
		return new org.springframework.security.core.userdetails.User(user1.getEmail(), user1.getPassword(),
				mapRolesToAuthorities(user1.getRoles()));
	}

	private Collection<? extends GrantedAuthority> mapRolesToAuthorities(Collection<Role> roles) {
		return roles.stream().map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
	}

	@Override
	public Long getUserIdByEmail(String email) {
		User1 user1 = userRepository.findByEmail(email);
		if (user1 != null) {
			return user1.getId();
		}
		return null;
	}

	@Override
	public User1 getUserById(Long id) {
		return userRepository.findById(id).orElse(null);
	}

}

package com.example.demo.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Arrays;
import java.util.Date;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.Files;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import java.awt.PageAttributes.MediaType;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import com.example.demo.model.Blog;
import com.example.demo.model.Book;
import com.example.demo.model.User;
import com.example.demo.model.Writer;
import com.example.demo.service.BlogService;
import com.example.demo.service.UserService;
import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpSession;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.util.StringUtils;

@Controller
public class BlogController {

	@Autowired
	private BlogService blogService;
	@Autowired
	private UserService userService;
	
//	@GetMapping("/publish")
//	public String addBlogs(Model model) {
//		Blog blog=new Blog();
//	model.addAttribute("blog",blog);
//	return "Writer/publish";
//}	
	
	@PostMapping("/blog")
	public String saveBlog(@ModelAttribute("blog") @Validated Blog blog, BindingResult bindingResult,Model model) throws IOException {
	    if (bindingResult.hasErrors()) {
	        // GÃ©rer les erreurs de validation
	        return "your-error-view";
	    }

	    if (blog.getId() == 0) {
	       
	        blog.setDate_publication(new Date());
	    

	      
	    }
	
	    blog.setDate_publication(new Date());
//
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    Object principal = authentication.getPrincipal();
	    UserDetails userDetails = (UserDetails) principal;
	    Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	    User user = userService.getUserById(userId);
	    
	    Writer writer = user.getWriter();
	    
	    blog.setWriter(writer);
	    //
	    MultipartFile multipartFile = blog.getCouverture();
	    if (multipartFile != null && !multipartFile.isEmpty()) {
	        String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
	        blog.setCouvertureFileName(fileName);
	        
	        long timestamp = System.currentTimeMillis();
	        
      String uploadDirectory = "src/main/resources/static/couvertures_blog/";

	        Path uploadPath = Paths.get(uploadDirectory);
	        if (!Files.exists(uploadPath)) {
	            Files.createDirectories(uploadPath);
	        }

	        try (InputStream inputStream = multipartFile.getInputStream()) {
	            Path filePath = uploadPath.resolve(fileName);
	            Files.copy(inputStream, filePath, StandardCopyOption.REPLACE_EXISTING);
	        } catch (IOException e) {
	            throw new IOException("Erreur lors de la copie du fichier");
	        }
	    
	    } else {
	        blog.setCouvertureFileName(null);
	        
	        
	    }
	
	    blogService.saveBlog(blog);
	    
	    
	    return "redirect:/publishes";
	}
	
	@RequestMapping("/deleteBlog/{id}")
	public String deleteBook(@PathVariable("id") long id) {
	    this.blogService.deleteBlogById(id);
	    return "redirect:/publishes";
	}	

	@GetMapping("/showFormForUpdateblog/{id}")
	public String showFormForUpdateblog(@PathVariable(value = "id") String id, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	            User user = userService.getUserById(userId);
	             String role=user.getRole();
	            model.addAttribute("user", user);
	            model.addAttribute("role", role);
	            model.addAttribute("logoutUrl", "/logout");
	    Blog blog = blogService.getBlogById(id);
	    model.addAttribute("blog", blog);
	   
	    if(!"author".equals(role)) {
 			return "redirect:/registration";
 		}
 		else {
 			return "Writer/update_blog";
 		}
 			
     } else {
         
     }
 }
 
 return "redirect:/login";

 
}
	

	}
	


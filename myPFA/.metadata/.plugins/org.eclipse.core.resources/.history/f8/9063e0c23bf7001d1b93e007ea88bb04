package com.example.demo.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.reactive.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User1DetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.OrRequestMatcher;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.bind.annotation.GetMapping;

import com.example.demo.service.User1Service;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

	@Autowired
	//@Lazy
	private UserService userService;
	//
	
	 
	
	//
	/*
	 * public void setUser1Service(User1Service user1Service) { this.user1Service =
	 * user1Service; }
	 */
	/*
	 * public User1Service getUser1Service() { return user1Service; }
	 */

	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	
	  @Bean public DaoAuthenticationProvider authenticationProvider() {
	  DaoAuthenticationProvider auth = new DaoAuthenticationProvider();
	  auth.setUser1DetailsService(userService);
	  auth.setPasswordEncoder(passwordEncoder()); return auth; }
	  
	  
	/*
	 * @Bean public AuthenticationManager
	 * authenticationManager(AuthenticationConfiguration
	 * authenticationConfiguration) throws Exception { return
	 * authenticationConfiguration.getAuthenticationManager(); //return
	 * AuthenticationConfiguration.
	 * initializeAuthenticationProviderBeanManagerConfigurer(null); }
	 */
	  
	  @Bean
	  public AuthenticationManager authenticationManager(HttpSecurity http, BCryptPasswordEncoder bCryptPasswordEncoder, User1DetailsService user1DetailService) 
	    throws Exception {
	      return http.getSharedObject(AuthenticationManagerBuilder.class)
	        .user1DetailsService(userService)
	        .passwordEncoder(bCryptPasswordEncoder)
	        .and()
	        .build();
	    
	  }
	  
	  
  
  @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws
  Exception {
	  
  http.authorizeHttpRequests().requestMatchers("/registration**","/**","/js/**",
  "/css/**","/img/**").permitAll() .anyRequest().authenticated() .and()
  
	  .formLogin().loginPage("/login").permitAll() .defaultSuccessUrl("/", true) .and() .logout()
	  .invalidateHttpSession(true) .clearAuthentication(true)
	  .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
  .logoutSuccessUrl("/login?logout").permitAll();
  
  http.authenticationProvider(authenticationProvider());

  
  return http.build(); }
	





}

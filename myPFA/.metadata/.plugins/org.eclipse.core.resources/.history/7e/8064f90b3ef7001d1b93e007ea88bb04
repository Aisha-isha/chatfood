package com.example.demo.web;
import java.io.UnsupportedEncodingException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.demo.model.User;
import com.example.demo.service.UserServiceImpl;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import jakarta.servlet.http.HttpServletRequest;
import net.bytebuddy.utility.RandomString;


@Controller
public class ForgotPasswordController {
	
	public class Utility {
	    public static String getSiteURL(HttpServletRequest request) {
	        String siteURL = request.getRequestURL().toString();
	        return siteURL.replace(request.getServletPath(), "");
	    }
	}
	public void sendEmail(String recipientEmail, String link)
	        throws MessagingException, UnsupportedEncodingException {
	    MimeMessage message = mailSender.createMimeMessage();              
	    MimeMessageHelper helper = new MimeMessageHelper(message);
	     
	    helper.setFrom("readmejeeproject@gmail.com", "ReadMe");
	    helper.setTo(recipientEmail);
	     
	    String subject = "Here's the link to reset your password";
	     
	    String content = "<p>Hello,</p>"
	            + "<p>You have requested to reset your password.</p>"
	            + "<p>Click the link below to change your password:</p>"
	            + "<p><a href=\"" + link + "\">Change my password</a></p>"
	            + "<br>"
	            + "<p>Ignore this email if you do remember your password, "
	            + "or you have not made the request.</p>";
	     
	    helper.setSubject(subject);
	     
	    helper.setText(content, true);
	     
	    mailSender.send(message);
	}
	
	@Autowired
	public JavaMailSender mailSender;
	
	@Autowired
	private UserServiceImpl userServiceImpl;
	
	@GetMapping("/forgot_password")
    public String showForgotPasswordForm() {
		return "forgot_password";
    }
 
	@PostMapping("/forgot_password")
	public String processForgotPassword(HttpServletRequest request, ModelMap model) {
	    String email = request.getParameter("email");
	    String token = RandomString.make(30);
	    try {
	        
			userServiceImpl.updateResetPasswordToken(token, email);
	        String resetPasswordLink = Utility.getSiteURL(request) + "/reset_password?token=" + token;
	        
	        sendEmail(email, resetPasswordLink);
	        System.out.println("email sent");
	        model.addAttribute("message", "We have sent a reset password link to your email. Please check your inbox.");
	         
	    } catch (UsernameNotFoundException ex) {
	        model.addAttribute("error", ex.getMessage()); 
	        
	    } catch (UnsupportedEncodingException | MessagingException e) {
	        model.addAttribute("error", "Error while sending email");
	        
	    }
	         
	    return "forgot_password";
	}
     
    public void sendEmail(){
 
    }  
     
     
    @GetMapping("/reset_password")
    public String showResetPasswordForm(@Param(value = "token") String token, ModelMap model) {
    	//UserServiceImpl userServiceImpl = new UserServiceImpl(null);
		User1 user = userServiceImpl.getByResetPasswordToken(token);
        model.addAttribute("token", token);
        
         
        if (user == null) {
            model.addAttribute("message", "Invalid Token");
           
            return "reset_password";
            
        }
        
        return "reset_password";
    }
     
    @PostMapping("/reset_password")
    public String processResetPassword(HttpServletRequest request, ModelMap model) {
        String token = request.getParameter("token");
        String password = request.getParameter("password");
        
        User1 user = userServiceImpl.getByResetPasswordToken(token);
       
        model.addAttribute("title", "Reset your password");
         
        if (user == null) {
            model.addAttribute("message", "Invalid Token");
            
            return "reset_password";
        } else {           
            userServiceImpl.updatePassword(user, password);
             
            model.addAttribute("message", "You have successfully changed your password.");
        }
        
        return "redirect:/login";
    }
	
	
}

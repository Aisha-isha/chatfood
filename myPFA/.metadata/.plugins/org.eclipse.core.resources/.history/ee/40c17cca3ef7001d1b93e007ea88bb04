package com.example.demo.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.FileUploadUtil;
import com.example.demo.model.User;
import com.example.demo.model.Writer;
import com.example.demo.model.Book;
import com.example.demo.model.Reader;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.repository.WriterRepository;
import com.example.demo.service.BookService;
import com.example.demo.service.ReaderService;
import com.example.demo.service.UserService;
import com.example.demo.service.WriterService;

import ch.qos.logback.classic.Logger;
import jakarta.servlet.http.HttpServletRequest;
import java.io.BufferedOutputStream;


@Controller
public class SettingsController {
	
	@Autowired
	private WriterService writerService;
	
	@Autowired
	private BookService bookService;
	
	@Autowired
	private BookRepository bookRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ReaderService readerService;
	
	@Autowired
	private WriterRepository writerRepository;
	

	
	private final Logger log = (Logger) LoggerFactory.getLogger(this.getClass());
	
	
	@GetMapping("/writerProfile/{id}")
	public String writerProfile(@PathVariable(value="id") long id,Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	            User user = userService.getUserById(userId);
	             String role=user.getRole();
	            model.addAttribute("user", user);
	            model.addAttribute("role", role);
	  
	    model.addAttribute("logoutUrl", "/logout");
	    
		List<Writer>  writers=writerService.getWriter();
		boolean isWriter = writers.stream().filter(o -> o.getId()==id).findFirst().isPresent();
		if(isWriter) {
			Writer writer=writerService.getWriterById(id);
			List<Book> books=bookRepository.findByWriterId(id);
			System.out.print(books.size());
			model.addAttribute("writer",writer);
			model.addAttribute("size",books.size());
			model.addAttribute("yes",1);
		}else {
			Reader reader=readerService.getReaderById(id);
			model.addAttribute("reader",reader);
			model.addAttribute("yes",0);
		}
	       
	    if(!"author".equals(role)) {
 			return "writerprofile";
 		}
 		else {
 			return "writerprofile";
 		}
 			
     } else {
         
     }
 }
 
 return "redirect:/login";
		
		
	
	}

	@PostMapping("/saveWriter")
	public String saveWriter(@ModelAttribute("writer") Writer writer,@ModelAttribute("user") User user,@RequestParam("personalimage") MultipartFile multipartFileOne) throws IOException{
		String filenameOne=StringUtils.cleanPath(multipartFileOne.getOriginalFilename());
		
		writer.setPersonalImage(filenameOne);
		
		Writer saveWriter=writerService.saveWriter(writer);
		String uploadDir="src/main/resources/static/profile/";
		FileUploadUtil.saveFile(uploadDir,filenameOne,multipartFileOne);
	
		
		return "redirect:/writerProfile/"+saveWriter.getId();
	}
	
	@PostMapping("/saveReader")
	public String saveReader(@ModelAttribute("reader") Reader reader,@RequestParam("personalimage") MultipartFile multipartFileOne) throws IOException{
		String filenameOne=StringUtils.cleanPath(multipartFileOne.getOriginalFilename());
		
		reader.setPersonalImage(filenameOne);
		
		Reader saveReader=readerService.saveReader(reader);
		String uploadDir="src/main/resources/static/profile/";
		
		FileUploadUtil.saveFile(uploadDir,filenameOne,multipartFileOne);
		
		return "redirect:/writerProfile/"+saveReader.getId();
	}
	
	
	@GetMapping("/updateProfile/{id}")
	public String updateProfile(@PathVariable(value="id") long id,Model model) {
		model.addAttribute("writer",writerService.getWriterById(id));
		model.addAttribute("yes",1);
	
		return "updateprofile";
		
	}
	
	@GetMapping("/changePasswordEmail/{id}")
	public String changePassowrd(@PathVariable(value="id") long id,Model model) {
		
		List<Writer>  writers=writerService.getWriter();
		boolean isWriter = writers.stream().filter(o -> o.getId()==id).findFirst().isPresent();
		if(isWriter) {
			model.addAttribute("writer",writerService.getWriterById(id));
			model.addAttribute("yes",1);
		}else {
			Reader reader=readerService.getReaderById(id);
			model.addAttribute("reader",reader);
			model.addAttribute("yes",0);
		}
		Optional<User> opt=userRepository.findById(id);
		User user=opt.get();
		model.addAttribute("user",user);
		
		return "changepassword";
		
	}
	
	
	@PostMapping("/saveEmail")
	public String saveEmail(@ModelAttribute("user") User user){

		
		
		userRepository.save(user);
		
		return "redirect:/changePasswordEmail/"+user.getId();
	}
	
	@GetMapping("/deleteAccount/{id}")
	public String deleteProfile(@PathVariable(value="id") long id,Model model) {
		model.addAttribute("writer",writerService.getWriterById(id));
		return "deleteprofile";
		
	}

	
}
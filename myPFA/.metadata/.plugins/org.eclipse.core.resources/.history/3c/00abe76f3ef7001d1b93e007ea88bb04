package com.example.demo.controller;
import org.springframework.security.core.Authentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.Files;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import java.awt.PageAttributes.MediaType;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import com.example.demo.model.Book;
import com.example.demo.model.Writer;
import com.example.demo.model.User1;
import com.example.demo.service.BookService;
import com.example.demo.service.UserService;
import com.example.demo.service.WriterService;
import com.example.demo.model.Blog;
import com.example.demo.service.BlogService;
import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpSession;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.util.StringUtils;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.ArrayList;

@Controller
public class BookController {
	

	@Autowired
	private BookService bookService;
	@Autowired
	private BlogService blogService; 
	@Autowired
	private UserService userService;
	@Autowired
	private WriterService writerService;
	@GetMapping("/publishes")
	public String viewBooks(Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUser1IdByEmail(userDetails.getUsername());
	            User1 user = userService.getUser1ById(userId);
	             String role=user.getRole();
	             model.addAttribute("role", role);
	            model.addAttribute("user", user);
	            
	            model.addAttribute("logoutUrl", "/logout");
	            List<Book> books = bookService.getAllBooks();
	            List<Book> listBooks=new ArrayList<>();
	    	    for (Book book : books) {
	    	    	 if (book.getWriter() == user.getWriter()){
	    	    		 listBooks.add(book);
	    	        }
	    	    }
	    	    List<Blog> blogs = blogService.getAllBlogs();
	            List<Blog> listBlogs=new ArrayList<>();
	    	    for (Blog blog : blogs) {
	    	    	 if (blog.getWriter() == user.getWriter()){
	    	    		 listBlogs.add(blog);
	    	        }
	    	    }
model.addAttribute("listBooks",listBooks);

		model.addAttribute("listBlogs",listBlogs);
		 if(!"author".equals(role)) {
 			return "redirect:/registration";
 		}
 		else {
 			return "Writer/view_publishs";
 		}
 			
     } else {
         
     }
 }
 
 return "redirect:/login";

 
}

	
	
	
	
	@GetMapping("/index")
	public String view(Model model) {
model.addAttribute("Books",bookService.getAllBooks());
		model.addAttribute("Blogs",blogService.getAllBlogs());
	return "index";
}
	
	
	
	@GetMapping("/publish")
	
	public String addBooks(Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUser1IdByEmail(userDetails.getUsername());
	            User1 user = userService.getUser1ById(userId);
	             String role=user.getRole();
	            model.addAttribute("user", user);
	          
	            model.addAttribute("logoutUrl", "/logout");
	             model.addAttribute("role", role);
	            
	            Book book=new Book();
	    		Blog blog=new Blog();
	    	model.addAttribute("book",book);
	    		model.addAttribute("blog",blog);
	    		
	    		 if(!"author".equals(role)) {
	    			return "redirect:/registration";
	    		}
	    		else {
	    			return "Writer/publish";
	    		}
	    			
	        } else {
	            
	        }
	    }
	    
	    return "redirect:/login";
	   
	    
	}
		
		
	
		

	
	
	@PostMapping("/")
	public String saveBook(@ModelAttribute("book") @Validated Book book, BindingResult bindingResult,Model model) throws IOException {
		
	    if (bindingResult.hasErrors()) {
	        // GÃ©rer les erreurs de validation
	        return "your-error-view";
	    }
	    

	    if (book.getId() == 0) {
	       
	        book.setDate_publication(new Date());
	       model.addAttribute("oldGenre", book.getGenre());
	        model.addAttribute("oldCouvertureFileName", book.getCouvertureFileName());
	      
	    }
	    
	  
	    book.setDate_publication(new Date());
	    //
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    Object principal = authentication.getPrincipal();
	    UserDetails userDetails = (UserDetails) principal;
	    Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	    User user = userService.getUserById(userId);
	    
	    Writer writer = user.getWriter();
	   
	    book.setWriter(writer);
	    
	    
	    
	    //
	    MultipartFile multipartFile = book.getCouverture();
	    if (multipartFile != null && !multipartFile.isEmpty()) {
	        String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
	        book.setCouvertureFileName(fileName);
	        
	        long timestamp = System.currentTimeMillis();
	        
      String uploadDirectory = "src/main/resources/static/couvertures/";

	        Path uploadPath = Paths.get(uploadDirectory);
	        if (!Files.exists(uploadPath)) {
	            Files.createDirectories(uploadPath);
	        }

	        try (InputStream inputStream = multipartFile.getInputStream()) {
	            Path filePath = uploadPath.resolve(fileName);
	            Files.copy(inputStream, filePath, StandardCopyOption.REPLACE_EXISTING);
	        } catch (IOException e) {
	            throw new IOException("Erreur lors de la copie du fichier");
	        }
	    
	    } else {
	        book.setCouvertureFileName(null);
	        
	        
	    }
	    bookService.saveBook(book);
	    
	
	  
	    
	    
	    
	    return "redirect:/publishes";
	}
	
	



	
	
	
	
	
	
	
	@GetMapping("/showFormForUpdate/{id}")
	public String showFormForUpdate(@PathVariable(value = "id") String id, Model model) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	            User user = userService.getUserById(userId);
	             String role=user.getRole();
	            model.addAttribute("user", user);
	            model.addAttribute("role", role);
	    Book book = bookService.getBookById(id);
	    model.addAttribute("book", book);
	    model.addAttribute("logoutUrl", "/logout");
	    model.addAttribute("oldCouvertureFileName", book.getCouvertureFileName());
	    model.addAttribute("oldGenre",book.getGenre());
	    if(!"author".equals(role)) {
 			return "redirect:/registration";
 		}
 		else {
 			return "Writer/update_publish";
 		}
 			
     } else {
         
     }
 }
 
 return "redirect:/login";

 
}
	


	

}





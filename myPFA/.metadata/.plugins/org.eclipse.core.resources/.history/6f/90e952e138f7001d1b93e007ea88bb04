package com.example.demo.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import com.example.demo.model.Writer;
import com.example.demo.model.Blog;
import com.example.demo.model.Book;
import com.example.demo.model.User;
import com.example.demo.repository.BlogRepository;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.BlogService;
import com.example.demo.service.BookService;
import com.example.demo.service.UserService;

import java.util.ArrayList;
@Controller 
public class LivresController {
    
    @Autowired
    private BlogRepository blogRepository;
    
    @Autowired
    private BookRepository bookRepository;
    @Autowired
    private UserService userService;
    


    

    @GetMapping("/livres")
    public String getAllBooks(Model model) {
    	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication.isAuthenticated()) {
	        Object principal = authentication.getPrincipal();
	        if (principal instanceof UserDetails) {
	            UserDetails userDetails = (UserDetails) principal;
	            Long userId = userService.getUserIdByEmail(userDetails.getUsername());
	            User user = userService.getUserById(userId);
	             String role=user.getRole();
	            model.addAttribute("user", user);
	            model.addAttribute("role", role);
	  
	    model.addAttribute("logoutUrl", "/logout");
	        }
	    }
        List<Book> books = bookRepository.findAll();
        Collections.reverse(books);

        List<String> fullNames = new ArrayList<>();
        for (Book book : books) {
        	  Writer writer = book.getWriter();
              User user2 = writer.getUserW();
            String fullName = user2.getFirsName() + " " + user2.getLastName();
            fullNames.add(fullName);
        }

        model.addAttribute("fullNames", fullNames);
        model.addAttribute("books", books);

 
 return "livre";
    }

}
